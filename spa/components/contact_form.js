/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '../web_modules/svelte/internal/index.mjs';

function create_fragment(ctx) {
	let section;
	let div3;
	let div2;
	let div0;
	let form;
	let input0;
	let t0;
	let input1;
	let t1;
	let input2;
	let t2;
	let textarea;
	let t3;
	let button;
	let t4;
	let t5;
	let div1;
	let h3;
	let t6;
	let t7;
	let p;
	let t8;
	let t9;
	let ul;
	let li0;
	let strong0;
	let t10;
	let t11;
	let t12;
	let li1;
	let strong1;
	let t13;
	let a;
	let t14;
	let a_href_value;
	let t15;
	let li2;
	let strong2;
	let t16;
	let t17;

	return {
		c() {
			section = element("section");
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			form = element("form");
			input0 = element("input");
			t0 = space();
			input1 = element("input");
			t1 = space();
			input2 = element("input");
			t2 = space();
			textarea = element("textarea");
			t3 = space();
			button = element("button");
			t4 = text("Send Now");
			t5 = space();
			div1 = element("div");
			h3 = element("h3");
			t6 = text(/*title*/ ctx[0]);
			t7 = space();
			p = element("p");
			t8 = text(/*desc*/ ctx[1]);
			t9 = space();
			ul = element("ul");
			li0 = element("li");
			strong0 = element("strong");
			t10 = text("Phone: ");
			t11 = text(/*phone*/ ctx[2]);
			t12 = space();
			li1 = element("li");
			strong1 = element("strong");
			t13 = text("Mail: ");
			a = element("a");
			t14 = text(/*email*/ ctx[3]);
			t15 = space();
			li2 = element("li");
			strong2 = element("strong");
			t16 = text("Address: ");
			t17 = text(/*address*/ ctx[4]);
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div3 = claim_element(section_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			form = claim_element(div0_nodes, "FORM", { action: true, method: true });
			var form_nodes = children(form);

			input0 = claim_element(form_nodes, "INPUT", {
				type: true,
				class: true,
				id: true,
				name: true,
				placeholder: true
			});

			t0 = claim_space(form_nodes);

			input1 = claim_element(form_nodes, "INPUT", {
				type: true,
				class: true,
				id: true,
				name: true,
				placeholder: true
			});

			t1 = claim_space(form_nodes);

			input2 = claim_element(form_nodes, "INPUT", {
				type: true,
				class: true,
				id: true,
				name: true,
				placeholder: true
			});

			t2 = claim_space(form_nodes);

			textarea = claim_element(form_nodes, "TEXTAREA", {
				name: true,
				id: true,
				class: true,
				placeholder: true
			});

			children(textarea).forEach(detach);
			t3 = claim_space(form_nodes);
			button = claim_element(form_nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			t4 = claim_text(button_nodes, "Send Now");
			button_nodes.forEach(detach);
			form_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t5 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h3 = claim_element(div1_nodes, "H3", { id: true });
			var h3_nodes = children(h3);
			t6 = claim_text(h3_nodes, /*title*/ ctx[0]);
			h3_nodes.forEach(detach);
			t7 = claim_space(div1_nodes);
			p = claim_element(div1_nodes, "P", {});
			var p_nodes = children(p);
			t8 = claim_text(p_nodes, /*desc*/ ctx[1]);
			p_nodes.forEach(detach);
			t9 = claim_space(div1_nodes);
			ul = claim_element(div1_nodes, "UL", { class: true });
			var ul_nodes = children(ul);
			li0 = claim_element(ul_nodes, "LI", { class: true });
			var li0_nodes = children(li0);
			strong0 = claim_element(li0_nodes, "STRONG", { class: true });
			var strong0_nodes = children(strong0);
			t10 = claim_text(strong0_nodes, "Phone: ");
			t11 = claim_text(strong0_nodes, /*phone*/ ctx[2]);
			strong0_nodes.forEach(detach);
			li0_nodes.forEach(detach);
			t12 = claim_space(ul_nodes);
			li1 = claim_element(ul_nodes, "LI", { class: true });
			var li1_nodes = children(li1);
			strong1 = claim_element(li1_nodes, "STRONG", { class: true });
			var strong1_nodes = children(strong1);
			t13 = claim_text(strong1_nodes, "Mail: ");
			a = claim_element(strong1_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t14 = claim_text(a_nodes, /*email*/ ctx[3]);
			a_nodes.forEach(detach);
			strong1_nodes.forEach(detach);
			li1_nodes.forEach(detach);
			t15 = claim_space(ul_nodes);
			li2 = claim_element(ul_nodes, "LI", { class: true });
			var li2_nodes = children(li2);
			strong2 = claim_element(li2_nodes, "STRONG", { class: true });
			var strong2_nodes = children(strong2);
			t16 = claim_text(strong2_nodes, "Address: ");
			t17 = claim_text(strong2_nodes, /*address*/ ctx[4]);
			strong2_nodes.forEach(detach);
			li2_nodes.forEach(detach);
			ul_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(input0, "type", "text");
			attr(input0, "class", "form-control mb-3");
			attr(input0, "id", "name");
			attr(input0, "name", "name");
			attr(input0, "placeholder", "Your Name");
			attr(input1, "type", "email");
			attr(input1, "class", "form-control mb-3");
			attr(input1, "id", "mail");
			attr(input1, "name", "mail");
			attr(input1, "placeholder", "Your Email");
			attr(input2, "type", "text");
			attr(input2, "class", "form-control mb-3");
			attr(input2, "id", "subject");
			attr(input2, "name", "subject");
			attr(input2, "placeholder", "Subject");
			attr(textarea, "name", "message");
			attr(textarea, "id", "message");
			attr(textarea, "class", "form-control mb-3");
			attr(textarea, "placeholder", "Your Message");
			attr(button, "type", "submit");
			button.value = "send";
			attr(button, "class", "btn btn-primary");
			attr(form, "action", "#");
			attr(form, "method", "POST");
			attr(div0, "class", "col-lg-7 mb-4 mb-lg-0");
			attr(h3, "id", "why-you-should-contact-us");
			attr(strong0, "class", "svelte-12tswga");
			attr(li0, "class", "svelte-12tswga");
			attr(a, "href", a_href_value = "mailto:" + /*email*/ ctx[3]);
			attr(a, "class", "svelte-12tswga");
			attr(strong1, "class", "svelte-12tswga");
			attr(li1, "class", "svelte-12tswga");
			attr(strong2, "class", "svelte-12tswga");
			attr(li2, "class", "svelte-12tswga");
			attr(ul, "class", "svelte-12tswga");
			attr(div1, "class", "col-lg-5 content svelte-12tswga");
			attr(div2, "class", "row");
			attr(div3, "class", "container");
			attr(section, "class", "section bg-white");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div3);
			append(div3, div2);
			append(div2, div0);
			append(div0, form);
			append(form, input0);
			append(form, t0);
			append(form, input1);
			append(form, t1);
			append(form, input2);
			append(form, t2);
			append(form, textarea);
			append(form, t3);
			append(form, button);
			append(button, t4);
			append(div2, t5);
			append(div2, div1);
			append(div1, h3);
			append(h3, t6);
			append(div1, t7);
			append(div1, p);
			append(p, t8);
			append(div1, t9);
			append(div1, ul);
			append(ul, li0);
			append(li0, strong0);
			append(strong0, t10);
			append(strong0, t11);
			append(ul, t12);
			append(ul, li1);
			append(li1, strong1);
			append(strong1, t13);
			append(strong1, a);
			append(a, t14);
			append(ul, t15);
			append(ul, li2);
			append(li2, strong2);
			append(strong2, t16);
			append(strong2, t17);
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data(t6, /*title*/ ctx[0]);
			if (dirty & /*desc*/ 2) set_data(t8, /*desc*/ ctx[1]);
			if (dirty & /*phone*/ 4) set_data(t11, /*phone*/ ctx[2]);
			if (dirty & /*email*/ 8) set_data(t14, /*email*/ ctx[3]);

			if (dirty & /*email*/ 8 && a_href_value !== (a_href_value = "mailto:" + /*email*/ ctx[3])) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*address*/ 16) set_data(t17, /*address*/ ctx[4]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props,
		{ desc } = $$props,
		{ phone } = $$props,
		{ email } = $$props,
		{ address } = $$props;

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("desc" in $$props) $$invalidate(1, desc = $$props.desc);
		if ("phone" in $$props) $$invalidate(2, phone = $$props.phone);
		if ("email" in $$props) $$invalidate(3, email = $$props.email);
		if ("address" in $$props) $$invalidate(4, address = $$props.address);
	};

	return [title, desc, phone, email, address];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			desc: 1,
			phone: 2,
			email: 3,
			address: 4
		});
	}
}

export default Component;