/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '../web_modules/svelte/internal/index.mjs';

function create_fragment(ctx) {
	let section;
	let div4;
	let div3;
	let div0;
	let h2;
	let t0;
	let t1;
	let p;
	let t2;
	let t3;
	let a;
	let t4_value = /*link*/ ctx[2].title + "";
	let t4;
	let t5;
	let i;
	let a_href_value;
	let div0_class_value;
	let t6;
	let div2;
	let div1;
	let img;
	let img_src_value;
	let img_alt_value;
	let div2_class_value;
	let section_class_value;

	return {
		c() {
			section = element("section");
			div4 = element("div");
			div3 = element("div");
			div0 = element("div");
			h2 = element("h2");
			t0 = text(/*title*/ ctx[0]);
			t1 = space();
			p = element("p");
			t2 = text(/*body*/ ctx[1]);
			t3 = space();
			a = element("a");
			t4 = text(t4_value);
			t5 = space();
			i = element("i");
			t6 = space();
			div2 = element("div");
			div1 = element("div");
			img = element("img");
			this.h();
		},
		l(nodes) {
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div4 = claim_element(section_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			h2 = claim_element(div0_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, /*title*/ ctx[0]);
			h2_nodes.forEach(detach);
			t1 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", {});
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, /*body*/ ctx[1]);
			p_nodes.forEach(detach);
			t3 = claim_space(div0_nodes);
			a = claim_element(div0_nodes, "A", { href: true, class: true });
			var a_nodes = children(a);
			t4 = claim_text(a_nodes, t4_value);
			t5 = claim_space(a_nodes);
			i = claim_element(a_nodes, "I", { class: true });
			children(i).forEach(detach);
			a_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t6 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div1 = claim_element(div2_nodes, "DIV", {});
			var div1_nodes = children(div1);
			img = claim_element(div1_nodes, "IMG", { src: true, alt: true, class: true });
			div1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			section_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(h2, "class", "section-title");
			attr(i, "class", "ti-arrow-right svelte-1wmgenm");
			attr(a, "href", a_href_value = /*link*/ ctx[2].url);
			attr(a, "class", "btn-link svelte-1wmgenm");
			attr(div0, "class", div0_class_value = "col-md-6 order-" + /*textPos*/ ctx[4] + " order-md-" + /*textPosMD*/ ctx[5] + " svelte-1wmgenm");
			if (img.src !== (img_src_value = "assets" + /*image*/ ctx[3].url)) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = /*image*/ ctx[3].alt);
			attr(img, "class", "img-fluid");
			attr(div2, "class", div2_class_value = "col-md-6 order-" + /*imgPos*/ ctx[6] + " order-md-" + /*imgPosMD*/ ctx[7] + " mb-4 mb-md-0" + " svelte-1wmgenm");
			attr(div3, "class", "row align-items-center");
			attr(div4, "class", "container");
			attr(section, "class", section_class_value = "section" + /*backgroundClass*/ ctx[8] + " svelte-1wmgenm");
		},
		m(target, anchor) {
			insert(target, section, anchor);
			append(section, div4);
			append(div4, div3);
			append(div3, div0);
			append(div0, h2);
			append(h2, t0);
			append(div0, t1);
			append(div0, p);
			append(p, t2);
			append(div0, t3);
			append(div0, a);
			append(a, t4);
			append(a, t5);
			append(a, i);
			append(div3, t6);
			append(div3, div2);
			append(div2, div1);
			append(div1, img);
		},
		p(ctx, [dirty]) {
			if (dirty & /*title*/ 1) set_data(t0, /*title*/ ctx[0]);
			if (dirty & /*body*/ 2) set_data(t2, /*body*/ ctx[1]);
			if (dirty & /*link*/ 4 && t4_value !== (t4_value = /*link*/ ctx[2].title + "")) set_data(t4, t4_value);

			if (dirty & /*link*/ 4 && a_href_value !== (a_href_value = /*link*/ ctx[2].url)) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*textPos, textPosMD*/ 48 && div0_class_value !== (div0_class_value = "col-md-6 order-" + /*textPos*/ ctx[4] + " order-md-" + /*textPosMD*/ ctx[5] + " svelte-1wmgenm")) {
				attr(div0, "class", div0_class_value);
			}

			if (dirty & /*image*/ 8 && img.src !== (img_src_value = "assets" + /*image*/ ctx[3].url)) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*image*/ 8 && img_alt_value !== (img_alt_value = /*image*/ ctx[3].alt)) {
				attr(img, "alt", img_alt_value);
			}

			if (dirty & /*imgPos, imgPosMD*/ 192 && div2_class_value !== (div2_class_value = "col-md-6 order-" + /*imgPos*/ ctx[6] + " order-md-" + /*imgPosMD*/ ctx[7] + " mb-4 mb-md-0" + " svelte-1wmgenm")) {
				attr(div2, "class", div2_class_value);
			}

			if (dirty & /*backgroundClass*/ 256 && section_class_value !== (section_class_value = "section" + /*backgroundClass*/ ctx[8] + " svelte-1wmgenm")) {
				attr(section, "class", section_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(section);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { title } = $$props,
		{ body } = $$props,
		{ link } = $$props,
		{ image } = $$props,
		{ background } = $$props;

	let textPos = 1;
	let textPosMD = 2;
	let imgPos = 2;
	let imgPosMD = 1;

	if (image.position == "right") {
		textPos = 2;
		textPosMD = 1;
		imgPos = 1;
		imgPosMD = 2;
	}

	let backgroundClass = "";

	if (background == "blue") {
		backgroundClass = " bg-light";
	}

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("body" in $$props) $$invalidate(1, body = $$props.body);
		if ("link" in $$props) $$invalidate(2, link = $$props.link);
		if ("image" in $$props) $$invalidate(3, image = $$props.image);
		if ("background" in $$props) $$invalidate(9, background = $$props.background);
	};

	return [
		title,
		body,
		link,
		image,
		textPos,
		textPosMD,
		imgPos,
		imgPosMD,
		backgroundClass,
		background
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			body: 1,
			link: 2,
			image: 3,
			background: 9
		});
	}
}

export default Component;